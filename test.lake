
-- function call
def f() {
  return 5 + 5
}
assert(f() == 10)

-- 'var'
var a = 5
assert(a == 5)

-- while loop
var i = 10
while i < 20 {
  i = i + 1
}
assert(i == 20)

-- numeric for loop
var total = 0
for i = 1, 10 {
  total = total + i
}
assert(total == 55)

-- generic loop
var xs = ["abc", "def", "ghi"]
var x = ""
for k, v in ipairs(xs) {
  x = x .. k .. v
}
assert(x == "1abc2def3ghi")

-- tables with value index
xs = [a = 5, *["hello " .. "world"] = 17]
assert(xs['a'] == 5)
assert(xs["hello world"] == 17)

-- 'not equals' operator
-- In Lua, '~=' is the not equals operator.
-- But C-based languages usually use '!='
assert(1 != 2)
assert(not (1 != 1))
assert(not ('a' != "a"))

-- if
if true {
  assert(true)
} elseif false {
  assert(false)
} else {
  assert(false)
}

if false {
  assert(false)
} elseif true {
  assert(true)
} else {
  assert(false)
}

if false {
  assert(false)
} elseif nil {
  assert(false)
} else {
  assert(true)
}
